Help on module vocabularizer:

NAME
    vocabularizer - This simple app helps speed testing and building vocabulary in a foreign language.

CLASSES
    builtins.object
        bcolors
    
    class bcolors(builtins.object)
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  BOLD = '\x1b[1m'
     |  
     |  ENDC = '\x1b[0m'
     |  
     |  FAIL = '\x1b[91m'
     |  
     |  HEADER = '\x1b[95m'
     |  
     |  OKBLUE = '\x1b[94m'
     |  
     |  OKCYAN = '\x1b[96m'
     |  
     |  OKGREEN = '\x1b[92m'
     |  
     |  UNDERLINE = '\x1b[4m'
     |  
     |  WARNING = '\x1b[93m'

FUNCTIONS
    add_word(word, da, translation, mode)
        Adds a word to the vocabulary in the memory
    
    add_word_it()
    
    bcolor_da(da: str) -> str
    
    clean_and_save_vocabulary(file='')
        used internally only: drops _ columns and exports dataframe.
    
    decode_da(da: str) -> str
        Converts definitive article code into a definitive article
    
    decode_mode(mode: str)
        converts a mode code into the mode description
    
    get_config(config_item)
        If configuration has been loaded, this function will retrieve the value of the config_item.
    
    get_version()
        Displays library version
    
    inspect_vocabulary()
        Gives a brief overview of the loaded words in different groupings.
    
    left_1(s: str)
        Returns the first character of a string. 
        Used in dataframe value references
    
    listdir(path=None)
        Return a list containing the names of the files in the directory.
        
        path can be specified as either str, bytes, or a path-like object.  If path is bytes,
          the filenames returned will also be bytes; in all other circumstances
          the filenames returned will be str.
        If path is None, uses the path='.'.
        On some platforms, path may also be specified as an open file descriptor;\
          the file descriptor must refer to a directory.
          If this functionality is unavailable, using it raises NotImplementedError.
        
        The list is in arbitrary order.  It does not include the special
        entries '.' and '..' even if they are present in the directory.
    
    load_all_files()
        Loads all vocabularies from the vocabularies folder
    
    load_file(file)
        Loads a vocabulary file and extracts file information from a conventional filename
    
    load_weights(file)
        Loads weights from weights file.
    
    new_weight(row)
    
    output_decorator(text, level, motiv='start')
    
    random_choice(word_mode: str, count_of_words: int) -> list
    
    save_result(test, points, rounds)
        Saves the result of a test in the results file.
    
    save_vocabulary_to_file(file='')
        Exports a vocabulary file.
    
    save_weights(file)
    
    set_convert(s: set)
        Concatenates set elements
    
    show_loaded_files()
    
    show_vocabulary(offset_rows: int, fetch_rows: int)
    
    show_vocabulary_pg(pagesize: int)
    
    test_1(word_mode: str = '', count_of_words: int = 10)
        Test 1 tests your writing skills and knowledge
    
    test_2(word_mode: str = '', count_of_words: int = 20)
        multiple choice test
    
    test_selector()
    
    translate(word: str, all: str = 'first', rev: str = 'str', da: str = 'da') -> list
        Translates a word, outputs a list
        options:
        - get all translations (all:True) or the first (all:first)
        - reverse translate (ie to first language) (rev: rev) or straight (rev: str)
        - retrieve definitive article (da: da) or not (da: n)
    
    translate_list(words: list, rev: str = 'str', da: str = 'da') -> list
        Finds the first translation of all the input words
    
    unload_vocabulary()
        Clears the memory from all loaded vocabularies.
    
    update_weights(dw: pandas.core.frame.DataFrame)
        Updates the weights based on the latest test result
    
    word_memorizer(count_of_words: int, sleep_time_seconds: int = 4, random_or_last: str = 'rnd')
