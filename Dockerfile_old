# syntax=docker/dockerfile:1

# Use a slim Python base image for both build and final stages
FROM python:3.10-slim AS base

# Builder stage: install dependencies into a virtual environment
FROM base AS builder
WORKDIR /app

# Install system dependencies required for gTTS and audio playback
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        mpg123 \
        gcc \
        libffi-dev \
        libsndfile1 \
    && rm -rf /var/lib/apt/lists/*

# Copy only requirements.txt if it exists, otherwise fallback to copying the whole context for pip freeze
# (Assume requirements.txt is present or generated by the user)
COPY --link requirements.txt ./

# Create venv and install dependencies using pip cache
RUN --mount=type=cache,target=/root/.cache/pip \
    python -m venv .venv && \
    .venv/bin/pip install --upgrade pip && \
    .venv/bin/pip install -r requirements.txt

# Copy the rest of the application code (excluding venv, .git, etc. via .dockerignore)
COPY --link . .

# Final stage: minimal image with only runtime dependencies and app code
FROM base AS final
WORKDIR /app

# Create a non-root user
RUN addgroup --system appgroup && adduser --system --ingroup appgroup appuser

# Copy the virtual environment and app code from builder
COPY --from=builder /app/.venv /app/.venv
COPY --from=builder /app /app

# Set environment variables for Python and pip
ENV PATH="/app/.venv/bin:$PATH"
ENV PYTHONUNBUFFERED=1

# Use non-root user
USER appuser

# Default command (can be overridden)
CMD ["python", "browser.py"]
